eval('Z + 1')
eval(Z + 1
)
!!fxn1()
dplyr::mutate(X, !!fxn1())
fxn1
expr(X + 1)
rlang::expr(X+1)
c(rlang::expr(X+1), rlang::expr(X+2))
rlang::sym("4+1")
rlang::sym("X+1")
!!rlang::sym("X+1")
?rlang::exprs
fxn1
sym_vec <- c("X[1]+1 + pars[2]", "X[2]+2")
library(tidycensus)
v18 <- load_variables(2018, "acs5", cache = TRUE)
View(v18)
age <- get_acs(geography = "tract",
variables = "B25007",
state = "OH",
county = "Franklin County",
geometry = TRUE)
age <- get_acs(geography = "tract",
table = "B25007",
state = "OH",
county = "Franklin County",
geometry = TRUE)
head(age)
age <- get_acs(geography = "tract",
table = "B25007_001",
state = "OH",
county = "Franklin County",
geometry = TRUE)
age <- get_acs(geography = "tract",
table = "B25007",
state = "OH",
county = "Franklin County",
geometry = TRUE)
head(age)
?get_acs
setwd("InfectionTrees/")
usethis::create_package()
usethis::create_package(".")
usethis::create_package("~/InfectionTrees")
usethis::use_git()
pkgdown::build_site()
pkgdown::build_home()
usethis::use_github_links()
pkgdown::build_home()
warnings()
build_site()
pkgodwn::build_site()
pkgdown::build_site()
usethis::use_test()
devtools::test()
devtools::test()
usethis::use_test()
devtools::test()
usethis::use_test()
usethis::use_test()
devtools::test()
usethis::use_test()
devtools::load_all()
devtools::test()
devtools::load_all()
## with data.table
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
data.table::as.data.table(sampled_data),
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
#######################################################3
## Uses original data
## Permutes the clusters so better representation of the average loglike for a  particular cluster as opposed to sampling from all clusters
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
p_11 <- 1 / ( 1 + exp(1))
p_01 <- 1 / ( 1 + exp(1.5))
exp_out <- log((1 - p_11)^2 * p_11)  +
log((1 - p_01)^2 * p_01)
expect_equal(exp_out, out)
devtools::load_all()
#######################################################3
## Uses original data
## Permutes the clusters so better representation of the average loglike for a  particular cluster as opposed to sampling from all clusters
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
p_11 <- 1 / ( 1 + exp(1))
p_01 <- 1 / ( 1 + exp(1.5))
exp_out <- log((1 - p_11)^2 * p_11)  +
log((1 - p_01)^2 * p_01)
expect_equal(exp_out, out)
class(sampled_data)
#######################################################3
## Uses original data
## Permutes the clusters so better representation of the average loglike for a  particular cluster as opposed to sampling from all clusters
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
devtools::load_all()
#######################################################3
## Uses original data
## Permutes the clusters so better representation of the average loglike for a  particular cluster as opposed to sampling from all clusters
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
p_11 <- 1 / ( 1 + exp(1))
p_01 <- 1 / ( 1 + exp(1.5))
exp_out <- log((1 - p_11)^2 * p_11)  +
log((1 - p_01)^2 * p_01)
expect_equal(exp_out, out)
inf_params <- c(1, 0)
obs_summarized_data <- data.frame(cluster_size = 1,
freq = 3)
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
sampled_data$x <- rnorm(nrow(sampled_data),
mean = 0,
sd = .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x"))
expect_equal(cov_mat[,2], sampled_data$x)
out <- general_loglike_summarized(inf_params,
obs_summarized_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat)
expect_equal(length(out), 1)  ### Ok this tells like nothing lol
p <- 1 / (1 + exp(- cov_mat %*% inf_params))
expect_equal(3 * log(1 - p[1]), out)
## ###############################
##  # now x is 1/0
inf_params <- c(0, 1)
obs_summarized_data <- data.frame(cluster_size = 1,
freq = 3)
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
sampled_data$x <- c(1,
1, 0, 1, 0,
0)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x"))
expect_equal(cov_mat[,2], sampled_data$x)
out <- general_loglike_summarized(inf_params,
obs_summarized_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat)
expect_equal(length(out), 1)
p_mat <- 1 / (1 + exp(- cov_mat %*% inf_params))
exp_out <- 3 * log(1/2 * ((1 - p_mat[1]) +(1 - p_mat[6])))
expect_equal(exp_out, out)
## ################################3
## # And more than one freq
##  # now x is 1/0
inf_params <- c(0, 1)
obs_summarized_data <- data.frame(cluster_size = c(1, 4),
freq = c(3, 1))
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
sampled_data$x <- c(1,
1, 0, 1, 0,
0)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x"))
expect_equal(cov_mat[,2], sampled_data$x)
out <- general_loglike_summarized(inf_params,
obs_summarized_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat)
expect_equal(length(out), 1)
p_mat <- 1 / (1 + exp(- cov_mat %*% inf_params))
exp_out <- 3 * log(1/2 * ((1 - p_mat[1]) +(1 - p_mat[6]))) +
log((1-p_mat[1]) * p_mat[1]^2 *
(1-p_mat[6]) *
(1-p_mat[1]) * p_mat[1] *
(1-p_mat[6]))
expect_equal(exp_out, out)
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
sampled_data <- rbind(clust_1, clust_2)
out <- general_loglike_sampled_data(sampled_data)
exp_out1 <- log(.6)
exp_out2 <- log(.2 * .8^2 *
.9 *
.9 * .1 *
.9)
expect_equal(out$avg_loglike[1], exp_out1)
expect_equal(out$avg_loglike[2], exp_out2)
## # averages yay
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
out <- general_loglike_sampled_data(sampled_data)
exp_out1 <- log((.6 + .8) / 2)
exp_out2 <- log(.2 * .8^2 *
.9 *
.9 * .1 *
.9)
expect_equal(out$avg_loglike[1], exp_out1)
expect_equal(out$avg_loglike[2], exp_out2)
## #One more for good measure
## # averages yay
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 4,
prob_inf = c(.2, .3, .2, .2),
n_inf = c(1, 2, 0, 0))
sampled_data <- rbind(clust_1, clust_2, clust_3)
out <- general_loglike_sampled_data(sampled_data)
exp_out1 <- log(.6)
exp_out2 <- log((.2 * .8^2 *
.9 *
.9 * .1 *
.9 +
.8 * .2^1 *
.7 * .3^2 *
.8 *
.8
)/2)
expect_equal(out$avg_loglike[1], exp_out1)
expect_equal(out$avg_loglike[2], exp_out2)
data <- data.frame(prob_inf = .3,
n_inf = 0)
out <- general_cluster_like(data)
expect_equal(.7, out)
##
data <- data.frame(prob_inf = c(.3, .2),
n_inf = c(1, 0))
out <- general_cluster_like(data)
expect_equal(.7 * .3 * .8 , out)
devtools::load_all()
devtools::test()
pkgdown::build_site()
usethis::use_github_action("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
pkgdown::build_site()
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("bookdown")
install.packages("bookdown")
1^0
1^NA
pkgdown::build_site()
options(rmarkdown.html_vignette.check_title = FALSE)
pkgdown::preview_site()
devtools::load_all()
?tb_clean
Rdpack::viewRd()
?Rdpack::viewRd()
