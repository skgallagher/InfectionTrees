x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
p_11 <- 1 / ( 1 + exp(1))
p_01 <- 1 / ( 1 + exp(1.5))
exp_out <- log((1 - p_11)^2 * p_11)  +
log((1 - p_01)^2 * p_01)
expect_equal(exp_out, out)
class(sampled_data)
#######################################################3
## Uses original data
## Permutes the clusters so better representation of the average loglike for a  particular cluster as opposed to sampling from all clusters
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
devtools::load_all()
#######################################################3
## Uses original data
## Permutes the clusters so better representation of the average loglike for a  particular cluster as opposed to sampling from all clusters
observed_data <- data.frame(cluster_id = c(1,
2, 2,
3, 3),
x = c(1,
0, 0,
1, 1))
B <- 1
covariate_names <- "x"
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = "x")
inf_params <- c(-2, 1)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = "x")
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = "x")
p_neg <- 1/ (1 + exp(2))
p_pos <- 1 / (1 + exp(1))
exp_out <- log((1 - p_pos) *
(1-p_neg)^2 * p_neg *
(1-p_pos)^2 * p_pos
)
expect_equal(exp_out, out)
## two variables
observed_data <- data.frame(cluster_id = c(1, 1,
2, 2),
x = c(1, 1, 0, 0),
y = c(1, 1, 1, 1))
B <- 10
covariate_names <- c("x", "y")
sampled_data <- sample_permuted_cond_trees(observed_data,
B = B,
covariate_names = c("x", "y"))
inf_params <- c(-2, .5, .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x", "y"))
out <- general_loglike(inf_params,
observed_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat,
cov_names = c("x", "y"))
p_11 <- 1 / ( 1 + exp(1))
p_01 <- 1 / ( 1 + exp(1.5))
exp_out <- log((1 - p_11)^2 * p_11)  +
log((1 - p_01)^2 * p_01)
expect_equal(exp_out, out)
inf_params <- c(1, 0)
obs_summarized_data <- data.frame(cluster_size = 1,
freq = 3)
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
sampled_data$x <- rnorm(nrow(sampled_data),
mean = 0,
sd = .5)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x"))
expect_equal(cov_mat[,2], sampled_data$x)
out <- general_loglike_summarized(inf_params,
obs_summarized_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat)
expect_equal(length(out), 1)  ### Ok this tells like nothing lol
p <- 1 / (1 + exp(- cov_mat %*% inf_params))
expect_equal(3 * log(1 - p[1]), out)
## ###############################
##  # now x is 1/0
inf_params <- c(0, 1)
obs_summarized_data <- data.frame(cluster_size = 1,
freq = 3)
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
sampled_data$x <- c(1,
1, 0, 1, 0,
0)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x"))
expect_equal(cov_mat[,2], sampled_data$x)
out <- general_loglike_summarized(inf_params,
obs_summarized_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat)
expect_equal(length(out), 1)
p_mat <- 1 / (1 + exp(- cov_mat %*% inf_params))
exp_out <- 3 * log(1/2 * ((1 - p_mat[1]) +(1 - p_mat[6])))
expect_equal(exp_out, out)
## ################################3
## # And more than one freq
##  # now x is 1/0
inf_params <- c(0, 1)
obs_summarized_data <- data.frame(cluster_size = c(1, 4),
freq = c(3, 1))
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
sampled_data$x <- c(1,
1, 0, 1, 0,
0)
cov_mat <- covariate_df_to_mat(sampled_data,
cov_names = c("x"))
expect_equal(cov_mat[,2], sampled_data$x)
out <- general_loglike_summarized(inf_params,
obs_summarized_data,
sampled_data,
return_neg = FALSE,
cov_mat = cov_mat)
expect_equal(length(out), 1)
p_mat <- 1 / (1 + exp(- cov_mat %*% inf_params))
exp_out <- 3 * log(1/2 * ((1 - p_mat[1]) +(1 - p_mat[6]))) +
log((1-p_mat[1]) * p_mat[1]^2 *
(1-p_mat[6]) *
(1-p_mat[1]) * p_mat[1] *
(1-p_mat[6]))
expect_equal(exp_out, out)
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
sampled_data <- rbind(clust_1, clust_2)
out <- general_loglike_sampled_data(sampled_data)
exp_out1 <- log(.6)
exp_out2 <- log(.2 * .8^2 *
.9 *
.9 * .1 *
.9)
expect_equal(out$avg_loglike[1], exp_out1)
expect_equal(out$avg_loglike[2], exp_out2)
## # averages yay
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 1,
prob_inf = .2,
n_inf = 0)
sampled_data <- rbind(clust_1, clust_2, clust_3)
out <- general_loglike_sampled_data(sampled_data)
exp_out1 <- log((.6 + .8) / 2)
exp_out2 <- log(.2 * .8^2 *
.9 *
.9 * .1 *
.9)
expect_equal(out$avg_loglike[1], exp_out1)
expect_equal(out$avg_loglike[2], exp_out2)
## #One more for good measure
## # averages yay
clust_1 <- data.frame(cluster_id = "a",
cluster_size = 1,
prob_inf = .4,
n_inf = 0)
clust_2 <- data.frame(cluster_id = "b",
cluster_size = 4,
prob_inf = c(.8, .1, .1, .1),
n_inf = c(2, 0, 1, 0))
clust_3 <- data.frame(cluster_id = "c",
cluster_size = 4,
prob_inf = c(.2, .3, .2, .2),
n_inf = c(1, 2, 0, 0))
sampled_data <- rbind(clust_1, clust_2, clust_3)
out <- general_loglike_sampled_data(sampled_data)
exp_out1 <- log(.6)
exp_out2 <- log((.2 * .8^2 *
.9 *
.9 * .1 *
.9 +
.8 * .2^1 *
.7 * .3^2 *
.8 *
.8
)/2)
expect_equal(out$avg_loglike[1], exp_out1)
expect_equal(out$avg_loglike[2], exp_out2)
data <- data.frame(prob_inf = .3,
n_inf = 0)
out <- general_cluster_like(data)
expect_equal(.7, out)
##
data <- data.frame(prob_inf = c(.3, .2),
n_inf = c(1, 0))
out <- general_cluster_like(data)
expect_equal(.7 * .3 * .8 , out)
devtools::load_all()
devtools::test()
pkgdown::build_site()
usethis::use_github_action("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
pkgdown::build_site()
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("bookdown")
install.packages("bookdown")
1^0
1^NA
pkgdown::build_site()
options(rmarkdown.html_vignette.check_title = FALSE)
pkgdown::preview_site()
devtools::load_all()
?tb_clean
Rdpack::viewRd()
?Rdpack::viewRd()
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
devtools::load_all()
library(InfectionTrees)
library(tidyr)
library(dplyr)
library(kableExtra)
library(ggplot2)
theme_set(theme_bw() + theme(axis.title = element_text()))
set.seed(2020)
## Generate possible covariates
sample_covariates_df <- data.frame(x = c(1, 1, 0, 0),
y = c(1, 0, 1, 0),
z = c(-1, 0, .5, 1))
beta0 <- -2
beta1 <- 1
beta2 <- .5
beta3 <- -1.2
M <- 100
data <- simulate_bp(K = M,
inf_params = c(beta0, beta1, beta2, beta3),
sample_covariates_df = sample_covariates_df,
covariate_names = c("x", "y", "z"),
max_size = 50)
data %>% group_by(cluster_id) %>%
summarize(cluster_size = n()) %>%
ungroup() %>%
group_by(cluster_size) %>%
summarize(freq = n()) %>%
ungroup() %>%
kable(type = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F,
position = "center")
B <- 1000
mc_trees <- sample_mc_trees(observed_data = data,
B = B,
covariate_names = c("x", "y", "z"))
mc_trees %>% tail() %>%
kable(type = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
inf_params_0 <- c(0,0, 0, 0)
best_params <- optim(inf_params_0, fn = general_loglike,
mc_samples_summary = mc_trees,
return_neg = TRUE,
cov_names = c("x", "y", "z"),
method = "L-BFGS-B",
lower = c(-4, -4, -4, -4),
upper = c(4, 4, 4, 4),
hessian = TRUE)
best_params <- optim(inf_params_0, fn = general_loglike,
sampled_data = mc_trees,
return_neg = TRUE,
cov_names = c("x", "y", "z"),
method = "L-BFGS-B",
lower = c(-4, -4, -4, -4),
upper = c(4, 4, 4, 4),
hessian = TRUE)
devtools::load_all()
best_params <- optim(inf_params_0, fn = general_loglike,
sampled_data = mc_trees,
return_neg = TRUE,
cov_names = c("x", "y", "z"),
method = "L-BFGS-B",
lower = c(-4, -4, -4, -4),
upper = c(4, 4, 4, 4),
hessian = TRUE)
usethis::use_test()
devtools::test()
devtools::test()
best_params <- optim(inf_params_0, fn = general_loglike,
mc_trees = mc_trees,
return_neg = TRUE,
cov_names = c("x", "y", "z"),
method = "L-BFGS-B",
lower = c(-4, -4, -4, -4),
upper = c(4, 4, 4, 4),
hessian = TRUE)
?general_loglike
devtools::document()
?general_loglike
devtools::document()
?general_loglike
?color
?general_loglike
devtools::load_all()
?general_loglike
round(best_params$par, 2)
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::test()
devtools::test()
?general_loglike
devtools::load_all()
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_samples_summary = mc_trees,
alpha = .05,
multiple_outside_transmissions = FALSE)
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_trees = mc_trees,
alpha = .05,
multiple_outside_transmissions = FALSE)
devtools::load_all()
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_trees = mc_trees,
alpha = .05,
multiple_outside_transmissions = FALSE)
devtools::load_all()
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_trees = mc_trees,
covariate_names <- c("x", "y", "z"),
alpha = .05,
multiple_outside_transmissions = FALSE)
devtools::load_all()
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_trees = mc_trees,
covariate_names <- c("x", "y", "z"),
alpha = .05,
multiple_outside_transmissions = FALSE)
devtools::load_all()
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_trees = mc_trees,
covariate_names <- c("x", "y", "z"),
alpha = .05,
multiple_outside_transmissions = FALSE)
traceback()
devtools::load_all()
lp_ests <- likelihood_profs(best_pars = best_params$par,
max_loglike = -best_params$value,
mc_trees = mc_trees,
covariate_names <- c("x", "y", "z"),
alpha = .05,
multiple_outside_transmissions = FALSE)
lp_ests %>% as.data.frame() %>%
kable(type = "html", digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_article()
pkgdown::build_articles()
