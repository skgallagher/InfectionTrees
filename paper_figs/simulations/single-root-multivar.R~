#!/usr/bin/env Rscript

## SKG
## July 1, 2020
## Setting up simulations for two bivariate and 1 cts variable



## Load libraries and data
devtools::load_all()
library(ggplot2)
library(dplyr)
library(data.table)
library(ggridges)
library(knitr)
library(kableExtra)

my_seed <- 7012020
set.seed(my_seed)

## Flip til failure

max_size <- 30
K <- 100
inf_params <- c(-2, .1, 1.5, .2)

covariates_df <- data.frame(x = rbinom(n = 10000, size = 1, prob = .25),
                           z = rnorm(n = 10000, mean = 1, sd = .5))
covariates_df$y <- ifelse(covariates_df$x == 1, rbinom(n = 10000, size = 1,
                                                     prob = .5),
                         rbinom(n = 10000, size = 1,
                                prob = .1))

covariates_df <- covariates_df %>% select(x, y, z)
covariate_names <- c("x", "y", "z")

M <- 500
best_params_mat <- matrix(0, nrow = M, ncol = length(covariate_names) + 1)
colnames(best_params_mat) <- c("Int.", "x", "y", "z")
for(ii in 1:M){
    print(ii)
    outbreak <- simulate_general_outbreak(K = K,
                                          inf_params = inf_params,
                                          sample_covariates_df = covariates_df,
                                          covariate_names = covariate_names,
                                          max_size = 30)
    

    outbreak_sub <- outbreak %>%
        select(cluster_id, x, y, z)
    B <- 1000
    sampled_data <- sample_permuted_cond_trees(outbreak_sub,
                                               B = B,
                                               covariate_names = covariate_names)
    max(sampled_data$cluster_size)

    init_params <- rep(0, length(covariate_names) + 1)
    bds <- rep(-5, length(covariate_names) + 1)
    cov_mat <- covariate_df_to_mat(sampled_data,
                                   cov_names = covariate_names)
    t1 <- proc.time()[3]
    best_params <- optim(par = init_params,
                         fn = general_loglike,
                         observed_data = outbreak_sub,
                         sampled_data = data.table::as.data.table(sampled_data),
                         return_neg = TRUE,
                         cov_mat = cov_mat,
                         cov_names = covariate_names,
                         method = "L-BFGS-B",
                         lower = bds,
                         upper = -bds
                         )
    t2 <- proc.time()[3] - t1
    print(paste("Optimization time:", round( t2 / 60, 3),
                "min"))
    best_params_mat[ii,] <- best_params$par
}

saveRDS(best_params_mat, "best_params.RDS")

colMeans(best_params_mat)

df <- as.data.frame(best_params_mat)
inf_params <- c(-2, .1, 1.5, .2)
df$Int. <- (df$Int. - -2 )/ sd(df$Int.)
df$x <- (df$x - .1 )/ sd(df$x)
df$y <- (df$y - 1.5) / sd(df$y)
df$z <- (df$z - .2) / sd(df$z) 

gg_df <- df %>% mutate(id = 1:n()) %>%
    tidyr::pivot_longer(-id)

ggplot(data = gg_df) + aes(y= name, x= value) +
    geom_density_ridges(scale = .9) +
    geom_vline(xintercept = 0, col = "red",
               linetype = "dashed")

colMeans(df)
